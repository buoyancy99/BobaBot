// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_param.proto

#ifndef PROTOBUF_camera_5fparam_2eproto__INCLUDED
#define PROTOBUF_camera_5fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_camera {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_camera_5fparam_2eproto();
void protobuf_AssignDesc_camera_5fparam_2eproto();
void protobuf_ShutdownFile_camera_5fparam_2eproto();

class Camera;
class CameraDistortion;
class CameraMatrix;
class Cameras;
class Resolution;

// ===================================================================

class CameraMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_camera.CameraMatrix) */ {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();

  CameraMatrix(const CameraMatrix& from);

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraMatrix& default_instance();

  void Swap(CameraMatrix* other);

  // implements Message ----------------------------------------------

  inline CameraMatrix* New() const { return New(NULL); }

  CameraMatrix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:roborts_camera.CameraMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > data_;
  friend void  protobuf_AddDesc_camera_5fparam_2eproto();
  friend void protobuf_AssignDesc_camera_5fparam_2eproto();
  friend void protobuf_ShutdownFile_camera_5fparam_2eproto();

  void InitAsDefaultInstance();
  static CameraMatrix* default_instance_;
};
// -------------------------------------------------------------------

class CameraDistortion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_camera.CameraDistortion) */ {
 public:
  CameraDistortion();
  virtual ~CameraDistortion();

  CameraDistortion(const CameraDistortion& from);

  inline CameraDistortion& operator=(const CameraDistortion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraDistortion& default_instance();

  void Swap(CameraDistortion* other);

  // implements Message ----------------------------------------------

  inline CameraDistortion* New() const { return New(NULL); }

  CameraDistortion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraDistortion& from);
  void MergeFrom(const CameraDistortion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraDistortion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:roborts_camera.CameraDistortion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > data_;
  friend void  protobuf_AddDesc_camera_5fparam_2eproto();
  friend void protobuf_AssignDesc_camera_5fparam_2eproto();
  friend void protobuf_ShutdownFile_camera_5fparam_2eproto();

  void InitAsDefaultInstance();
  static CameraDistortion* default_instance_;
};
// -------------------------------------------------------------------

class Resolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_camera.Resolution) */ {
 public:
  Resolution();
  virtual ~Resolution();

  Resolution(const Resolution& from);

  inline Resolution& operator=(const Resolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resolution& default_instance();

  void Swap(Resolution* other);

  // implements Message ----------------------------------------------

  inline Resolution* New() const { return New(NULL); }

  Resolution* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resolution& from);
  void MergeFrom(const Resolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Resolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // required uint32 width_offset = 3;
  bool has_width_offset() const;
  void clear_width_offset();
  static const int kWidthOffsetFieldNumber = 3;
  ::google::protobuf::uint32 width_offset() const;
  void set_width_offset(::google::protobuf::uint32 value);

  // required uint32 height_offset = 4;
  bool has_height_offset() const;
  void clear_height_offset();
  static const int kHeightOffsetFieldNumber = 4;
  ::google::protobuf::uint32 height_offset() const;
  void set_height_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:roborts_camera.Resolution)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width_offset();
  inline void clear_has_width_offset();
  inline void set_has_height_offset();
  inline void clear_has_height_offset();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_offset_;
  ::google::protobuf::uint32 height_offset_;
  friend void  protobuf_AddDesc_camera_5fparam_2eproto();
  friend void protobuf_AssignDesc_camera_5fparam_2eproto();
  friend void protobuf_ShutdownFile_camera_5fparam_2eproto();

  void InitAsDefaultInstance();
  static Resolution* default_instance_;
};
// -------------------------------------------------------------------

class Camera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_camera.Camera) */ {
 public:
  Camera();
  virtual ~Camera();

  Camera(const Camera& from);

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camera& default_instance();

  void Swap(Camera* other);

  // implements Message ----------------------------------------------

  inline Camera* New() const { return New(NULL); }

  Camera* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string camera_name = 1;
  bool has_camera_name() const;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 1;
  const ::std::string& camera_name() const;
  void set_camera_name(const ::std::string& value);
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  ::std::string* mutable_camera_name();
  ::std::string* release_camera_name();
  void set_allocated_camera_name(::std::string* camera_name);

  // required string camera_type = 2;
  bool has_camera_type() const;
  void clear_camera_type();
  static const int kCameraTypeFieldNumber = 2;
  const ::std::string& camera_type() const;
  void set_camera_type(const ::std::string& value);
  void set_camera_type(const char* value);
  void set_camera_type(const char* value, size_t size);
  ::std::string* mutable_camera_type();
  ::std::string* release_camera_type();
  void set_allocated_camera_type(::std::string* camera_type);

  // required string camera_path = 3;
  bool has_camera_path() const;
  void clear_camera_path();
  static const int kCameraPathFieldNumber = 3;
  const ::std::string& camera_path() const;
  void set_camera_path(const ::std::string& value);
  void set_camera_path(const char* value);
  void set_camera_path(const char* value, size_t size);
  ::std::string* mutable_camera_path();
  ::std::string* release_camera_path();
  void set_allocated_camera_path(::std::string* camera_path);

  // required .roborts_camera.CameraMatrix camera_matrix = 4;
  bool has_camera_matrix() const;
  void clear_camera_matrix();
  static const int kCameraMatrixFieldNumber = 4;
  const ::roborts_camera::CameraMatrix& camera_matrix() const;
  ::roborts_camera::CameraMatrix* mutable_camera_matrix();
  ::roborts_camera::CameraMatrix* release_camera_matrix();
  void set_allocated_camera_matrix(::roborts_camera::CameraMatrix* camera_matrix);

  // required .roborts_camera.CameraDistortion camera_distortion = 5;
  bool has_camera_distortion() const;
  void clear_camera_distortion();
  static const int kCameraDistortionFieldNumber = 5;
  const ::roborts_camera::CameraDistortion& camera_distortion() const;
  ::roborts_camera::CameraDistortion* mutable_camera_distortion();
  ::roborts_camera::CameraDistortion* release_camera_distortion();
  void set_allocated_camera_distortion(::roborts_camera::CameraDistortion* camera_distortion);

  // optional uint32 fps = 6;
  bool has_fps() const;
  void clear_fps();
  static const int kFpsFieldNumber = 6;
  ::google::protobuf::uint32 fps() const;
  void set_fps(::google::protobuf::uint32 value);

  // optional .roborts_camera.Resolution resolution = 7;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 7;
  const ::roborts_camera::Resolution& resolution() const;
  ::roborts_camera::Resolution* mutable_resolution();
  ::roborts_camera::Resolution* release_resolution();
  void set_allocated_resolution(::roborts_camera::Resolution* resolution);

  // optional bool auto_exposure = 8;
  bool has_auto_exposure() const;
  void clear_auto_exposure();
  static const int kAutoExposureFieldNumber = 8;
  bool auto_exposure() const;
  void set_auto_exposure(bool value);

  // optional uint32 exposure_value = 9;
  bool has_exposure_value() const;
  void clear_exposure_value();
  static const int kExposureValueFieldNumber = 9;
  ::google::protobuf::uint32 exposure_value() const;
  void set_exposure_value(::google::protobuf::uint32 value);

  // optional uint32 exposure_time = 10;
  bool has_exposure_time() const;
  void clear_exposure_time();
  static const int kExposureTimeFieldNumber = 10;
  ::google::protobuf::uint32 exposure_time() const;
  void set_exposure_time(::google::protobuf::uint32 value);

  // optional bool auto_white_balance = 11;
  bool has_auto_white_balance() const;
  void clear_auto_white_balance();
  static const int kAutoWhiteBalanceFieldNumber = 11;
  bool auto_white_balance() const;
  void set_auto_white_balance(bool value);

  // optional bool auto_gain = 12;
  bool has_auto_gain() const;
  void clear_auto_gain();
  static const int kAutoGainFieldNumber = 12;
  bool auto_gain() const;
  void set_auto_gain(bool value);

  // optional uint32 contrast = 13;
  bool has_contrast() const;
  void clear_contrast();
  static const int kContrastFieldNumber = 13;
  ::google::protobuf::uint32 contrast() const;
  void set_contrast(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:roborts_camera.Camera)
 private:
  inline void set_has_camera_name();
  inline void clear_has_camera_name();
  inline void set_has_camera_type();
  inline void clear_has_camera_type();
  inline void set_has_camera_path();
  inline void clear_has_camera_path();
  inline void set_has_camera_matrix();
  inline void clear_has_camera_matrix();
  inline void set_has_camera_distortion();
  inline void clear_has_camera_distortion();
  inline void set_has_fps();
  inline void clear_has_fps();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_auto_exposure();
  inline void clear_has_auto_exposure();
  inline void set_has_exposure_value();
  inline void clear_has_exposure_value();
  inline void set_has_exposure_time();
  inline void clear_has_exposure_time();
  inline void set_has_auto_white_balance();
  inline void clear_has_auto_white_balance();
  inline void set_has_auto_gain();
  inline void clear_has_auto_gain();
  inline void set_has_contrast();
  inline void clear_has_contrast();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr camera_name_;
  ::google::protobuf::internal::ArenaStringPtr camera_type_;
  ::google::protobuf::internal::ArenaStringPtr camera_path_;
  ::roborts_camera::CameraMatrix* camera_matrix_;
  ::roborts_camera::CameraDistortion* camera_distortion_;
  ::roborts_camera::Resolution* resolution_;
  ::google::protobuf::uint32 fps_;
  ::google::protobuf::uint32 exposure_value_;
  ::google::protobuf::uint32 exposure_time_;
  bool auto_exposure_;
  bool auto_white_balance_;
  bool auto_gain_;
  ::google::protobuf::uint32 contrast_;
  friend void  protobuf_AddDesc_camera_5fparam_2eproto();
  friend void protobuf_AssignDesc_camera_5fparam_2eproto();
  friend void protobuf_ShutdownFile_camera_5fparam_2eproto();

  void InitAsDefaultInstance();
  static Camera* default_instance_;
};
// -------------------------------------------------------------------

class Cameras : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_camera.Cameras) */ {
 public:
  Cameras();
  virtual ~Cameras();

  Cameras(const Cameras& from);

  inline Cameras& operator=(const Cameras& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cameras& default_instance();

  void Swap(Cameras* other);

  // implements Message ----------------------------------------------

  inline Cameras* New() const { return New(NULL); }

  Cameras* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cameras& from);
  void MergeFrom(const Cameras& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cameras* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .roborts_camera.Camera camera = 1;
  int camera_size() const;
  void clear_camera();
  static const int kCameraFieldNumber = 1;
  const ::roborts_camera::Camera& camera(int index) const;
  ::roborts_camera::Camera* mutable_camera(int index);
  ::roborts_camera::Camera* add_camera();
  ::google::protobuf::RepeatedPtrField< ::roborts_camera::Camera >*
      mutable_camera();
  const ::google::protobuf::RepeatedPtrField< ::roborts_camera::Camera >&
      camera() const;

  // @@protoc_insertion_point(class_scope:roborts_camera.Cameras)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::roborts_camera::Camera > camera_;
  friend void  protobuf_AddDesc_camera_5fparam_2eproto();
  friend void protobuf_AssignDesc_camera_5fparam_2eproto();
  friend void protobuf_ShutdownFile_camera_5fparam_2eproto();

  void InitAsDefaultInstance();
  static Cameras* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraMatrix

// repeated double data = 1;
inline int CameraMatrix::data_size() const {
  return data_.size();
}
inline void CameraMatrix::clear_data() {
  data_.Clear();
}
inline double CameraMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:roborts_camera.CameraMatrix.data)
  return data_.Get(index);
}
inline void CameraMatrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:roborts_camera.CameraMatrix.data)
}
inline void CameraMatrix::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:roborts_camera.CameraMatrix.data)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraMatrix::data() const {
  // @@protoc_insertion_point(field_list:roborts_camera.CameraMatrix.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:roborts_camera.CameraMatrix.data)
  return &data_;
}

// -------------------------------------------------------------------

// CameraDistortion

// repeated double data = 1;
inline int CameraDistortion::data_size() const {
  return data_.size();
}
inline void CameraDistortion::clear_data() {
  data_.Clear();
}
inline double CameraDistortion::data(int index) const {
  // @@protoc_insertion_point(field_get:roborts_camera.CameraDistortion.data)
  return data_.Get(index);
}
inline void CameraDistortion::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:roborts_camera.CameraDistortion.data)
}
inline void CameraDistortion::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:roborts_camera.CameraDistortion.data)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraDistortion::data() const {
  // @@protoc_insertion_point(field_list:roborts_camera.CameraDistortion.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraDistortion::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:roborts_camera.CameraDistortion.data)
  return &data_;
}

// -------------------------------------------------------------------

// Resolution

// required uint32 width = 1;
inline bool Resolution::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resolution::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resolution::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resolution::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Resolution::width() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Resolution.width)
  return width_;
}
inline void Resolution::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Resolution.width)
}

// required uint32 height = 2;
inline bool Resolution::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resolution::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resolution::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resolution::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Resolution::height() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Resolution.height)
  return height_;
}
inline void Resolution::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Resolution.height)
}

// required uint32 width_offset = 3;
inline bool Resolution::has_width_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Resolution::set_has_width_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Resolution::clear_has_width_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Resolution::clear_width_offset() {
  width_offset_ = 0u;
  clear_has_width_offset();
}
inline ::google::protobuf::uint32 Resolution::width_offset() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Resolution.width_offset)
  return width_offset_;
}
inline void Resolution::set_width_offset(::google::protobuf::uint32 value) {
  set_has_width_offset();
  width_offset_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Resolution.width_offset)
}

// required uint32 height_offset = 4;
inline bool Resolution::has_height_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Resolution::set_has_height_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Resolution::clear_has_height_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Resolution::clear_height_offset() {
  height_offset_ = 0u;
  clear_has_height_offset();
}
inline ::google::protobuf::uint32 Resolution::height_offset() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Resolution.height_offset)
  return height_offset_;
}
inline void Resolution::set_height_offset(::google::protobuf::uint32 value) {
  set_has_height_offset();
  height_offset_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Resolution.height_offset)
}

// -------------------------------------------------------------------

// Camera

// required string camera_name = 1;
inline bool Camera::has_camera_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camera::set_has_camera_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camera::clear_has_camera_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camera::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_name();
}
inline const ::std::string& Camera::camera_name() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.camera_name)
  return camera_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_camera_name(const ::std::string& value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.camera_name)
}
inline void Camera::set_camera_name(const char* value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_camera.Camera.camera_name)
}
inline void Camera::set_camera_name(const char* value, size_t size) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_camera.Camera.camera_name)
}
inline ::std::string* Camera::mutable_camera_name() {
  set_has_camera_name();
  // @@protoc_insertion_point(field_mutable:roborts_camera.Camera.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_camera_name() {
  // @@protoc_insertion_point(field_release:roborts_camera.Camera.camera_name)
  clear_has_camera_name();
  return camera_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != NULL) {
    set_has_camera_name();
  } else {
    clear_has_camera_name();
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:roborts_camera.Camera.camera_name)
}

// required string camera_type = 2;
inline bool Camera::has_camera_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camera::set_has_camera_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camera::clear_has_camera_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camera::clear_camera_type() {
  camera_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_type();
}
inline const ::std::string& Camera::camera_type() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.camera_type)
  return camera_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_camera_type(const ::std::string& value) {
  set_has_camera_type();
  camera_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.camera_type)
}
inline void Camera::set_camera_type(const char* value) {
  set_has_camera_type();
  camera_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_camera.Camera.camera_type)
}
inline void Camera::set_camera_type(const char* value, size_t size) {
  set_has_camera_type();
  camera_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_camera.Camera.camera_type)
}
inline ::std::string* Camera::mutable_camera_type() {
  set_has_camera_type();
  // @@protoc_insertion_point(field_mutable:roborts_camera.Camera.camera_type)
  return camera_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_camera_type() {
  // @@protoc_insertion_point(field_release:roborts_camera.Camera.camera_type)
  clear_has_camera_type();
  return camera_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_camera_type(::std::string* camera_type) {
  if (camera_type != NULL) {
    set_has_camera_type();
  } else {
    clear_has_camera_type();
  }
  camera_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_type);
  // @@protoc_insertion_point(field_set_allocated:roborts_camera.Camera.camera_type)
}

// required string camera_path = 3;
inline bool Camera::has_camera_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Camera::set_has_camera_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Camera::clear_has_camera_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Camera::clear_camera_path() {
  camera_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_path();
}
inline const ::std::string& Camera::camera_path() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.camera_path)
  return camera_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_camera_path(const ::std::string& value) {
  set_has_camera_path();
  camera_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.camera_path)
}
inline void Camera::set_camera_path(const char* value) {
  set_has_camera_path();
  camera_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_camera.Camera.camera_path)
}
inline void Camera::set_camera_path(const char* value, size_t size) {
  set_has_camera_path();
  camera_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_camera.Camera.camera_path)
}
inline ::std::string* Camera::mutable_camera_path() {
  set_has_camera_path();
  // @@protoc_insertion_point(field_mutable:roborts_camera.Camera.camera_path)
  return camera_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_camera_path() {
  // @@protoc_insertion_point(field_release:roborts_camera.Camera.camera_path)
  clear_has_camera_path();
  return camera_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_camera_path(::std::string* camera_path) {
  if (camera_path != NULL) {
    set_has_camera_path();
  } else {
    clear_has_camera_path();
  }
  camera_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_path);
  // @@protoc_insertion_point(field_set_allocated:roborts_camera.Camera.camera_path)
}

// required .roborts_camera.CameraMatrix camera_matrix = 4;
inline bool Camera::has_camera_matrix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Camera::set_has_camera_matrix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Camera::clear_has_camera_matrix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Camera::clear_camera_matrix() {
  if (camera_matrix_ != NULL) camera_matrix_->::roborts_camera::CameraMatrix::Clear();
  clear_has_camera_matrix();
}
inline const ::roborts_camera::CameraMatrix& Camera::camera_matrix() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.camera_matrix)
  return camera_matrix_ != NULL ? *camera_matrix_ : *default_instance_->camera_matrix_;
}
inline ::roborts_camera::CameraMatrix* Camera::mutable_camera_matrix() {
  set_has_camera_matrix();
  if (camera_matrix_ == NULL) {
    camera_matrix_ = new ::roborts_camera::CameraMatrix;
  }
  // @@protoc_insertion_point(field_mutable:roborts_camera.Camera.camera_matrix)
  return camera_matrix_;
}
inline ::roborts_camera::CameraMatrix* Camera::release_camera_matrix() {
  // @@protoc_insertion_point(field_release:roborts_camera.Camera.camera_matrix)
  clear_has_camera_matrix();
  ::roborts_camera::CameraMatrix* temp = camera_matrix_;
  camera_matrix_ = NULL;
  return temp;
}
inline void Camera::set_allocated_camera_matrix(::roborts_camera::CameraMatrix* camera_matrix) {
  delete camera_matrix_;
  camera_matrix_ = camera_matrix;
  if (camera_matrix) {
    set_has_camera_matrix();
  } else {
    clear_has_camera_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_camera.Camera.camera_matrix)
}

// required .roborts_camera.CameraDistortion camera_distortion = 5;
inline bool Camera::has_camera_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Camera::set_has_camera_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Camera::clear_has_camera_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Camera::clear_camera_distortion() {
  if (camera_distortion_ != NULL) camera_distortion_->::roborts_camera::CameraDistortion::Clear();
  clear_has_camera_distortion();
}
inline const ::roborts_camera::CameraDistortion& Camera::camera_distortion() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.camera_distortion)
  return camera_distortion_ != NULL ? *camera_distortion_ : *default_instance_->camera_distortion_;
}
inline ::roborts_camera::CameraDistortion* Camera::mutable_camera_distortion() {
  set_has_camera_distortion();
  if (camera_distortion_ == NULL) {
    camera_distortion_ = new ::roborts_camera::CameraDistortion;
  }
  // @@protoc_insertion_point(field_mutable:roborts_camera.Camera.camera_distortion)
  return camera_distortion_;
}
inline ::roborts_camera::CameraDistortion* Camera::release_camera_distortion() {
  // @@protoc_insertion_point(field_release:roborts_camera.Camera.camera_distortion)
  clear_has_camera_distortion();
  ::roborts_camera::CameraDistortion* temp = camera_distortion_;
  camera_distortion_ = NULL;
  return temp;
}
inline void Camera::set_allocated_camera_distortion(::roborts_camera::CameraDistortion* camera_distortion) {
  delete camera_distortion_;
  camera_distortion_ = camera_distortion;
  if (camera_distortion) {
    set_has_camera_distortion();
  } else {
    clear_has_camera_distortion();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_camera.Camera.camera_distortion)
}

// optional uint32 fps = 6;
inline bool Camera::has_fps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Camera::set_has_fps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Camera::clear_has_fps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Camera::clear_fps() {
  fps_ = 0u;
  clear_has_fps();
}
inline ::google::protobuf::uint32 Camera::fps() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.fps)
  return fps_;
}
inline void Camera::set_fps(::google::protobuf::uint32 value) {
  set_has_fps();
  fps_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.fps)
}

// optional .roborts_camera.Resolution resolution = 7;
inline bool Camera::has_resolution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Camera::set_has_resolution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Camera::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Camera::clear_resolution() {
  if (resolution_ != NULL) resolution_->::roborts_camera::Resolution::Clear();
  clear_has_resolution();
}
inline const ::roborts_camera::Resolution& Camera::resolution() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.resolution)
  return resolution_ != NULL ? *resolution_ : *default_instance_->resolution_;
}
inline ::roborts_camera::Resolution* Camera::mutable_resolution() {
  set_has_resolution();
  if (resolution_ == NULL) {
    resolution_ = new ::roborts_camera::Resolution;
  }
  // @@protoc_insertion_point(field_mutable:roborts_camera.Camera.resolution)
  return resolution_;
}
inline ::roborts_camera::Resolution* Camera::release_resolution() {
  // @@protoc_insertion_point(field_release:roborts_camera.Camera.resolution)
  clear_has_resolution();
  ::roborts_camera::Resolution* temp = resolution_;
  resolution_ = NULL;
  return temp;
}
inline void Camera::set_allocated_resolution(::roborts_camera::Resolution* resolution) {
  delete resolution_;
  resolution_ = resolution;
  if (resolution) {
    set_has_resolution();
  } else {
    clear_has_resolution();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_camera.Camera.resolution)
}

// optional bool auto_exposure = 8;
inline bool Camera::has_auto_exposure() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Camera::set_has_auto_exposure() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Camera::clear_has_auto_exposure() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Camera::clear_auto_exposure() {
  auto_exposure_ = false;
  clear_has_auto_exposure();
}
inline bool Camera::auto_exposure() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.auto_exposure)
  return auto_exposure_;
}
inline void Camera::set_auto_exposure(bool value) {
  set_has_auto_exposure();
  auto_exposure_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.auto_exposure)
}

// optional uint32 exposure_value = 9;
inline bool Camera::has_exposure_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Camera::set_has_exposure_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Camera::clear_has_exposure_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Camera::clear_exposure_value() {
  exposure_value_ = 0u;
  clear_has_exposure_value();
}
inline ::google::protobuf::uint32 Camera::exposure_value() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.exposure_value)
  return exposure_value_;
}
inline void Camera::set_exposure_value(::google::protobuf::uint32 value) {
  set_has_exposure_value();
  exposure_value_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.exposure_value)
}

// optional uint32 exposure_time = 10;
inline bool Camera::has_exposure_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Camera::set_has_exposure_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Camera::clear_has_exposure_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Camera::clear_exposure_time() {
  exposure_time_ = 0u;
  clear_has_exposure_time();
}
inline ::google::protobuf::uint32 Camera::exposure_time() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.exposure_time)
  return exposure_time_;
}
inline void Camera::set_exposure_time(::google::protobuf::uint32 value) {
  set_has_exposure_time();
  exposure_time_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.exposure_time)
}

// optional bool auto_white_balance = 11;
inline bool Camera::has_auto_white_balance() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Camera::set_has_auto_white_balance() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Camera::clear_has_auto_white_balance() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Camera::clear_auto_white_balance() {
  auto_white_balance_ = false;
  clear_has_auto_white_balance();
}
inline bool Camera::auto_white_balance() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.auto_white_balance)
  return auto_white_balance_;
}
inline void Camera::set_auto_white_balance(bool value) {
  set_has_auto_white_balance();
  auto_white_balance_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.auto_white_balance)
}

// optional bool auto_gain = 12;
inline bool Camera::has_auto_gain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Camera::set_has_auto_gain() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Camera::clear_has_auto_gain() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Camera::clear_auto_gain() {
  auto_gain_ = false;
  clear_has_auto_gain();
}
inline bool Camera::auto_gain() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.auto_gain)
  return auto_gain_;
}
inline void Camera::set_auto_gain(bool value) {
  set_has_auto_gain();
  auto_gain_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.auto_gain)
}

// optional uint32 contrast = 13;
inline bool Camera::has_contrast() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Camera::set_has_contrast() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Camera::clear_has_contrast() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Camera::clear_contrast() {
  contrast_ = 0u;
  clear_has_contrast();
}
inline ::google::protobuf::uint32 Camera::contrast() const {
  // @@protoc_insertion_point(field_get:roborts_camera.Camera.contrast)
  return contrast_;
}
inline void Camera::set_contrast(::google::protobuf::uint32 value) {
  set_has_contrast();
  contrast_ = value;
  // @@protoc_insertion_point(field_set:roborts_camera.Camera.contrast)
}

// -------------------------------------------------------------------

// Cameras

// repeated .roborts_camera.Camera camera = 1;
inline int Cameras::camera_size() const {
  return camera_.size();
}
inline void Cameras::clear_camera() {
  camera_.Clear();
}
inline const ::roborts_camera::Camera& Cameras::camera(int index) const {
  // @@protoc_insertion_point(field_get:roborts_camera.Cameras.camera)
  return camera_.Get(index);
}
inline ::roborts_camera::Camera* Cameras::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_camera.Cameras.camera)
  return camera_.Mutable(index);
}
inline ::roborts_camera::Camera* Cameras::add_camera() {
  // @@protoc_insertion_point(field_add:roborts_camera.Cameras.camera)
  return camera_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_camera::Camera >*
Cameras::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:roborts_camera.Cameras.camera)
  return &camera_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_camera::Camera >&
Cameras::camera() const {
  // @@protoc_insertion_point(field_list:roborts_camera.Cameras.camera)
  return camera_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_camera

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camera_5fparam_2eproto__INCLUDED
