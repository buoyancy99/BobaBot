// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constraint_set.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "constraint_set.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_detection {

namespace {

const ::google::protobuf::Descriptor* Threshold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Threshold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmorSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmorSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalRecognization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalRecognization_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstraintSetConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstraintSetConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnemyColor_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_constraint_5fset_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_constraint_5fset_2eproto() {
  protobuf_AddDesc_constraint_5fset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "constraint_set.proto");
  GOOGLE_CHECK(file != NULL);
  Threshold_descriptor_ = file->message_type(0);
  static const int Threshold_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, light_max_aspect_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, light_min_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, light_max_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, light_max_angle_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, armor_max_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, armor_min_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, armor_max_aspect_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, armor_max_pixel_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, armor_max_stddev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, armor_max_mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, color_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, blue_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, red_thread_),
  };
  Threshold_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Threshold_descriptor_,
      Threshold::default_instance_,
      Threshold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, _has_bits_[0]),
      -1,
      -1,
      sizeof(Threshold),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Threshold, _internal_metadata_),
      -1);
  ArmorSize_descriptor_ = file->message_type(1);
  static const int ArmorSize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSize, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSize, height_),
  };
  ArmorSize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArmorSize_descriptor_,
      ArmorSize::default_instance_,
      ArmorSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSize, _has_bits_[0]),
      -1,
      -1,
      sizeof(ArmorSize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSize, _internal_metadata_),
      -1);
  SignalRecognization_descriptor_ = file->message_type(2);
  static const int SignalRecognization_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalRecognization, max_wait_fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalRecognization, min_pulse_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalRecognization, min_num_),
  };
  SignalRecognization_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignalRecognization_descriptor_,
      SignalRecognization::default_instance_,
      SignalRecognization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalRecognization, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignalRecognization),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalRecognization, _internal_metadata_),
      -1);
  ConstraintSetConfig_descriptor_ = file->message_type(3);
  static const int ConstraintSetConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, enable_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, enable_neon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, using_hsv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, armor_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, enemy_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, signal_recognization_),
  };
  ConstraintSetConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConstraintSetConfig_descriptor_,
      ConstraintSetConfig::default_instance_,
      ConstraintSetConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConstraintSetConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintSetConfig, _internal_metadata_),
      -1);
  EnemyColor_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_constraint_5fset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Threshold_descriptor_, &Threshold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArmorSize_descriptor_, &ArmorSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignalRecognization_descriptor_, &SignalRecognization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConstraintSetConfig_descriptor_, &ConstraintSetConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_constraint_5fset_2eproto() {
  delete Threshold::default_instance_;
  delete Threshold_reflection_;
  delete ArmorSize::default_instance_;
  delete ArmorSize_reflection_;
  delete SignalRecognization::default_instance_;
  delete SignalRecognization_reflection_;
  delete ConstraintSetConfig::default_instance_;
  delete ConstraintSetConfig_reflection_;
}

void protobuf_AddDesc_constraint_5fset_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_constraint_5fset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024constraint_set.proto\022\021roborts_detectio"
    "n\"\331\002\n\tThreshold\022\036\n\026light_max_aspect_rati"
    "o\030\001 \002(\002\022\026\n\016light_min_area\030\002 \002(\002\022\027\n\017light"
    "_max_angle\030\003 \002(\002\022\034\n\024light_max_angle_diff"
    "\030\004 \002(\002\022\027\n\017armor_max_angle\030\005 \002(\002\022\026\n\016armor"
    "_min_area\030\006 \002(\002\022\036\n\026armor_max_aspect_rati"
    "o\030\007 \002(\002\022\033\n\023armor_max_pixel_val\030\010 \002(\002\022\030\n\020"
    "armor_max_stddev\030\t \002(\002\022\026\n\016armor_max_mean"
    "\030\n \002(\002\022\024\n\014color_thread\030\013 \002(\002\022\023\n\013blue_thr"
    "ead\030\014 \002(\002\022\022\n\nred_thread\030\r \002(\002\"*\n\tArmorSi"
    "ze\022\r\n\005width\030\001 \002(\002\022\016\n\006height\030\002 \002(\002\"U\n\023Sig"
    "nalRecognization\022\024\n\014max_wait_fps\030\001 \002(\r\022\027"
    "\n\017min_pulse_angle\030\002 \002(\002\022\017\n\007min_num\030\003 \002(\r"
    "\"\260\002\n\023ConstraintSetConfig\022\024\n\014enable_debug"
    "\030\001 \002(\010\022\023\n\013enable_neon\030\002 \002(\010\022\021\n\tusing_hsv"
    "\030\003 \002(\010\022/\n\tthreshold\030\004 \002(\0132\034.roborts_dete"
    "ction.Threshold\0220\n\narmor_size\030\005 \002(\0132\034.ro"
    "borts_detection.ArmorSize\0222\n\013enemy_color"
    "\030\006 \002(\0162\035.roborts_detection.EnemyColor\022D\n"
    "\024signal_recognization\030\007 \002(\0132&.roborts_de"
    "tection.SignalRecognization*\037\n\nEnemyColo"
    "r\022\010\n\004BLUE\020\000\022\007\n\003RED\020\001", 860);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "constraint_set.proto", &protobuf_RegisterTypes);
  Threshold::default_instance_ = new Threshold();
  ArmorSize::default_instance_ = new ArmorSize();
  SignalRecognization::default_instance_ = new SignalRecognization();
  ConstraintSetConfig::default_instance_ = new ConstraintSetConfig();
  Threshold::default_instance_->InitAsDefaultInstance();
  ArmorSize::default_instance_->InitAsDefaultInstance();
  SignalRecognization::default_instance_->InitAsDefaultInstance();
  ConstraintSetConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_constraint_5fset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_constraint_5fset_2eproto {
  StaticDescriptorInitializer_constraint_5fset_2eproto() {
    protobuf_AddDesc_constraint_5fset_2eproto();
  }
} static_descriptor_initializer_constraint_5fset_2eproto_;
const ::google::protobuf::EnumDescriptor* EnemyColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnemyColor_descriptor_;
}
bool EnemyColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Threshold::kLightMaxAspectRatioFieldNumber;
const int Threshold::kLightMinAreaFieldNumber;
const int Threshold::kLightMaxAngleFieldNumber;
const int Threshold::kLightMaxAngleDiffFieldNumber;
const int Threshold::kArmorMaxAngleFieldNumber;
const int Threshold::kArmorMinAreaFieldNumber;
const int Threshold::kArmorMaxAspectRatioFieldNumber;
const int Threshold::kArmorMaxPixelValFieldNumber;
const int Threshold::kArmorMaxStddevFieldNumber;
const int Threshold::kArmorMaxMeanFieldNumber;
const int Threshold::kColorThreadFieldNumber;
const int Threshold::kBlueThreadFieldNumber;
const int Threshold::kRedThreadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Threshold::Threshold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.Threshold)
}

void Threshold::InitAsDefaultInstance() {
}

Threshold::Threshold(const Threshold& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_detection.Threshold)
}

void Threshold::SharedCtor() {
  _cached_size_ = 0;
  light_max_aspect_ratio_ = 0;
  light_min_area_ = 0;
  light_max_angle_ = 0;
  light_max_angle_diff_ = 0;
  armor_max_angle_ = 0;
  armor_min_area_ = 0;
  armor_max_aspect_ratio_ = 0;
  armor_max_pixel_val_ = 0;
  armor_max_stddev_ = 0;
  armor_max_mean_ = 0;
  color_thread_ = 0;
  blue_thread_ = 0;
  red_thread_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Threshold::~Threshold() {
  // @@protoc_insertion_point(destructor:roborts_detection.Threshold)
  SharedDtor();
}

void Threshold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Threshold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Threshold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Threshold_descriptor_;
}

const Threshold& Threshold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fset_2eproto();
  return *default_instance_;
}

Threshold* Threshold::default_instance_ = NULL;

Threshold* Threshold::New(::google::protobuf::Arena* arena) const {
  Threshold* n = new Threshold;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.Threshold)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Threshold, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Threshold*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(light_max_aspect_ratio_, armor_max_pixel_val_);
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(armor_max_stddev_, red_thread_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Threshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.Threshold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float light_max_aspect_ratio = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_max_aspect_ratio_)));
          set_has_light_max_aspect_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_light_min_area;
        break;
      }

      // required float light_min_area = 2;
      case 2: {
        if (tag == 21) {
         parse_light_min_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_min_area_)));
          set_has_light_min_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_light_max_angle;
        break;
      }

      // required float light_max_angle = 3;
      case 3: {
        if (tag == 29) {
         parse_light_max_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_max_angle_)));
          set_has_light_max_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_light_max_angle_diff;
        break;
      }

      // required float light_max_angle_diff = 4;
      case 4: {
        if (tag == 37) {
         parse_light_max_angle_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_max_angle_diff_)));
          set_has_light_max_angle_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_armor_max_angle;
        break;
      }

      // required float armor_max_angle = 5;
      case 5: {
        if (tag == 45) {
         parse_armor_max_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_angle_)));
          set_has_armor_max_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_armor_min_area;
        break;
      }

      // required float armor_min_area = 6;
      case 6: {
        if (tag == 53) {
         parse_armor_min_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_min_area_)));
          set_has_armor_min_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_armor_max_aspect_ratio;
        break;
      }

      // required float armor_max_aspect_ratio = 7;
      case 7: {
        if (tag == 61) {
         parse_armor_max_aspect_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_aspect_ratio_)));
          set_has_armor_max_aspect_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_armor_max_pixel_val;
        break;
      }

      // required float armor_max_pixel_val = 8;
      case 8: {
        if (tag == 69) {
         parse_armor_max_pixel_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_pixel_val_)));
          set_has_armor_max_pixel_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_armor_max_stddev;
        break;
      }

      // required float armor_max_stddev = 9;
      case 9: {
        if (tag == 77) {
         parse_armor_max_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_stddev_)));
          set_has_armor_max_stddev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_armor_max_mean;
        break;
      }

      // required float armor_max_mean = 10;
      case 10: {
        if (tag == 85) {
         parse_armor_max_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_mean_)));
          set_has_armor_max_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_color_thread;
        break;
      }

      // required float color_thread = 11;
      case 11: {
        if (tag == 93) {
         parse_color_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_thread_)));
          set_has_color_thread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_blue_thread;
        break;
      }

      // required float blue_thread = 12;
      case 12: {
        if (tag == 101) {
         parse_blue_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_thread_)));
          set_has_blue_thread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_red_thread;
        break;
      }

      // required float red_thread = 13;
      case 13: {
        if (tag == 109) {
         parse_red_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_thread_)));
          set_has_red_thread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.Threshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.Threshold)
  return false;
#undef DO_
}

void Threshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.Threshold)
  // required float light_max_aspect_ratio = 1;
  if (has_light_max_aspect_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->light_max_aspect_ratio(), output);
  }

  // required float light_min_area = 2;
  if (has_light_min_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->light_min_area(), output);
  }

  // required float light_max_angle = 3;
  if (has_light_max_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->light_max_angle(), output);
  }

  // required float light_max_angle_diff = 4;
  if (has_light_max_angle_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->light_max_angle_diff(), output);
  }

  // required float armor_max_angle = 5;
  if (has_armor_max_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->armor_max_angle(), output);
  }

  // required float armor_min_area = 6;
  if (has_armor_min_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->armor_min_area(), output);
  }

  // required float armor_max_aspect_ratio = 7;
  if (has_armor_max_aspect_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->armor_max_aspect_ratio(), output);
  }

  // required float armor_max_pixel_val = 8;
  if (has_armor_max_pixel_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->armor_max_pixel_val(), output);
  }

  // required float armor_max_stddev = 9;
  if (has_armor_max_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->armor_max_stddev(), output);
  }

  // required float armor_max_mean = 10;
  if (has_armor_max_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->armor_max_mean(), output);
  }

  // required float color_thread = 11;
  if (has_color_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->color_thread(), output);
  }

  // required float blue_thread = 12;
  if (has_blue_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->blue_thread(), output);
  }

  // required float red_thread = 13;
  if (has_red_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->red_thread(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.Threshold)
}

::google::protobuf::uint8* Threshold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.Threshold)
  // required float light_max_aspect_ratio = 1;
  if (has_light_max_aspect_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->light_max_aspect_ratio(), target);
  }

  // required float light_min_area = 2;
  if (has_light_min_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->light_min_area(), target);
  }

  // required float light_max_angle = 3;
  if (has_light_max_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->light_max_angle(), target);
  }

  // required float light_max_angle_diff = 4;
  if (has_light_max_angle_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->light_max_angle_diff(), target);
  }

  // required float armor_max_angle = 5;
  if (has_armor_max_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->armor_max_angle(), target);
  }

  // required float armor_min_area = 6;
  if (has_armor_min_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->armor_min_area(), target);
  }

  // required float armor_max_aspect_ratio = 7;
  if (has_armor_max_aspect_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->armor_max_aspect_ratio(), target);
  }

  // required float armor_max_pixel_val = 8;
  if (has_armor_max_pixel_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->armor_max_pixel_val(), target);
  }

  // required float armor_max_stddev = 9;
  if (has_armor_max_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->armor_max_stddev(), target);
  }

  // required float armor_max_mean = 10;
  if (has_armor_max_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->armor_max_mean(), target);
  }

  // required float color_thread = 11;
  if (has_color_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->color_thread(), target);
  }

  // required float blue_thread = 12;
  if (has_blue_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->blue_thread(), target);
  }

  // required float red_thread = 13;
  if (has_red_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->red_thread(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.Threshold)
  return target;
}

int Threshold::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.Threshold)
  int total_size = 0;

  if (has_light_max_aspect_ratio()) {
    // required float light_max_aspect_ratio = 1;
    total_size += 1 + 4;
  }

  if (has_light_min_area()) {
    // required float light_min_area = 2;
    total_size += 1 + 4;
  }

  if (has_light_max_angle()) {
    // required float light_max_angle = 3;
    total_size += 1 + 4;
  }

  if (has_light_max_angle_diff()) {
    // required float light_max_angle_diff = 4;
    total_size += 1 + 4;
  }

  if (has_armor_max_angle()) {
    // required float armor_max_angle = 5;
    total_size += 1 + 4;
  }

  if (has_armor_min_area()) {
    // required float armor_min_area = 6;
    total_size += 1 + 4;
  }

  if (has_armor_max_aspect_ratio()) {
    // required float armor_max_aspect_ratio = 7;
    total_size += 1 + 4;
  }

  if (has_armor_max_pixel_val()) {
    // required float armor_max_pixel_val = 8;
    total_size += 1 + 4;
  }

  if (has_armor_max_stddev()) {
    // required float armor_max_stddev = 9;
    total_size += 1 + 4;
  }

  if (has_armor_max_mean()) {
    // required float armor_max_mean = 10;
    total_size += 1 + 4;
  }

  if (has_color_thread()) {
    // required float color_thread = 11;
    total_size += 1 + 4;
  }

  if (has_blue_thread()) {
    // required float blue_thread = 12;
    total_size += 1 + 4;
  }

  if (has_red_thread()) {
    // required float red_thread = 13;
    total_size += 1 + 4;
  }

  return total_size;
}
int Threshold::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.Threshold)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required float light_max_aspect_ratio = 1;
    total_size += 1 + 4;

    // required float light_min_area = 2;
    total_size += 1 + 4;

    // required float light_max_angle = 3;
    total_size += 1 + 4;

    // required float light_max_angle_diff = 4;
    total_size += 1 + 4;

    // required float armor_max_angle = 5;
    total_size += 1 + 4;

    // required float armor_min_area = 6;
    total_size += 1 + 4;

    // required float armor_max_aspect_ratio = 7;
    total_size += 1 + 4;

    // required float armor_max_pixel_val = 8;
    total_size += 1 + 4;

    // required float armor_max_stddev = 9;
    total_size += 1 + 4;

    // required float armor_max_mean = 10;
    total_size += 1 + 4;

    // required float color_thread = 11;
    total_size += 1 + 4;

    // required float blue_thread = 12;
    total_size += 1 + 4;

    // required float red_thread = 13;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Threshold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.Threshold)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Threshold* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Threshold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.Threshold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.Threshold)
    MergeFrom(*source);
  }
}

void Threshold::MergeFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.Threshold)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_light_max_aspect_ratio()) {
      set_light_max_aspect_ratio(from.light_max_aspect_ratio());
    }
    if (from.has_light_min_area()) {
      set_light_min_area(from.light_min_area());
    }
    if (from.has_light_max_angle()) {
      set_light_max_angle(from.light_max_angle());
    }
    if (from.has_light_max_angle_diff()) {
      set_light_max_angle_diff(from.light_max_angle_diff());
    }
    if (from.has_armor_max_angle()) {
      set_armor_max_angle(from.armor_max_angle());
    }
    if (from.has_armor_min_area()) {
      set_armor_min_area(from.armor_min_area());
    }
    if (from.has_armor_max_aspect_ratio()) {
      set_armor_max_aspect_ratio(from.armor_max_aspect_ratio());
    }
    if (from.has_armor_max_pixel_val()) {
      set_armor_max_pixel_val(from.armor_max_pixel_val());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_armor_max_stddev()) {
      set_armor_max_stddev(from.armor_max_stddev());
    }
    if (from.has_armor_max_mean()) {
      set_armor_max_mean(from.armor_max_mean());
    }
    if (from.has_color_thread()) {
      set_color_thread(from.color_thread());
    }
    if (from.has_blue_thread()) {
      set_blue_thread(from.blue_thread());
    }
    if (from.has_red_thread()) {
      set_red_thread(from.red_thread());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Threshold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Threshold::CopyFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Threshold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void Threshold::Swap(Threshold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Threshold::InternalSwap(Threshold* other) {
  std::swap(light_max_aspect_ratio_, other->light_max_aspect_ratio_);
  std::swap(light_min_area_, other->light_min_area_);
  std::swap(light_max_angle_, other->light_max_angle_);
  std::swap(light_max_angle_diff_, other->light_max_angle_diff_);
  std::swap(armor_max_angle_, other->armor_max_angle_);
  std::swap(armor_min_area_, other->armor_min_area_);
  std::swap(armor_max_aspect_ratio_, other->armor_max_aspect_ratio_);
  std::swap(armor_max_pixel_val_, other->armor_max_pixel_val_);
  std::swap(armor_max_stddev_, other->armor_max_stddev_);
  std::swap(armor_max_mean_, other->armor_max_mean_);
  std::swap(color_thread_, other->color_thread_);
  std::swap(blue_thread_, other->blue_thread_);
  std::swap(red_thread_, other->red_thread_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Threshold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Threshold_descriptor_;
  metadata.reflection = Threshold_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Threshold

// required float light_max_aspect_ratio = 1;
bool Threshold::has_light_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Threshold::set_has_light_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void Threshold::clear_has_light_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void Threshold::clear_light_max_aspect_ratio() {
  light_max_aspect_ratio_ = 0;
  clear_has_light_max_aspect_ratio();
}
 float Threshold::light_max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_max_aspect_ratio)
  return light_max_aspect_ratio_;
}
 void Threshold::set_light_max_aspect_ratio(float value) {
  set_has_light_max_aspect_ratio();
  light_max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_max_aspect_ratio)
}

// required float light_min_area = 2;
bool Threshold::has_light_min_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Threshold::set_has_light_min_area() {
  _has_bits_[0] |= 0x00000002u;
}
void Threshold::clear_has_light_min_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void Threshold::clear_light_min_area() {
  light_min_area_ = 0;
  clear_has_light_min_area();
}
 float Threshold::light_min_area() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_min_area)
  return light_min_area_;
}
 void Threshold::set_light_min_area(float value) {
  set_has_light_min_area();
  light_min_area_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_min_area)
}

// required float light_max_angle = 3;
bool Threshold::has_light_max_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Threshold::set_has_light_max_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void Threshold::clear_has_light_max_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void Threshold::clear_light_max_angle() {
  light_max_angle_ = 0;
  clear_has_light_max_angle();
}
 float Threshold::light_max_angle() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_max_angle)
  return light_max_angle_;
}
 void Threshold::set_light_max_angle(float value) {
  set_has_light_max_angle();
  light_max_angle_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_max_angle)
}

// required float light_max_angle_diff = 4;
bool Threshold::has_light_max_angle_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Threshold::set_has_light_max_angle_diff() {
  _has_bits_[0] |= 0x00000008u;
}
void Threshold::clear_has_light_max_angle_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
void Threshold::clear_light_max_angle_diff() {
  light_max_angle_diff_ = 0;
  clear_has_light_max_angle_diff();
}
 float Threshold::light_max_angle_diff() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_max_angle_diff)
  return light_max_angle_diff_;
}
 void Threshold::set_light_max_angle_diff(float value) {
  set_has_light_max_angle_diff();
  light_max_angle_diff_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_max_angle_diff)
}

// required float armor_max_angle = 5;
bool Threshold::has_armor_max_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Threshold::set_has_armor_max_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void Threshold::clear_has_armor_max_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void Threshold::clear_armor_max_angle() {
  armor_max_angle_ = 0;
  clear_has_armor_max_angle();
}
 float Threshold::armor_max_angle() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_angle)
  return armor_max_angle_;
}
 void Threshold::set_armor_max_angle(float value) {
  set_has_armor_max_angle();
  armor_max_angle_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_angle)
}

// required float armor_min_area = 6;
bool Threshold::has_armor_min_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Threshold::set_has_armor_min_area() {
  _has_bits_[0] |= 0x00000020u;
}
void Threshold::clear_has_armor_min_area() {
  _has_bits_[0] &= ~0x00000020u;
}
void Threshold::clear_armor_min_area() {
  armor_min_area_ = 0;
  clear_has_armor_min_area();
}
 float Threshold::armor_min_area() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_min_area)
  return armor_min_area_;
}
 void Threshold::set_armor_min_area(float value) {
  set_has_armor_min_area();
  armor_min_area_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_min_area)
}

// required float armor_max_aspect_ratio = 7;
bool Threshold::has_armor_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Threshold::set_has_armor_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void Threshold::clear_has_armor_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void Threshold::clear_armor_max_aspect_ratio() {
  armor_max_aspect_ratio_ = 0;
  clear_has_armor_max_aspect_ratio();
}
 float Threshold::armor_max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_aspect_ratio)
  return armor_max_aspect_ratio_;
}
 void Threshold::set_armor_max_aspect_ratio(float value) {
  set_has_armor_max_aspect_ratio();
  armor_max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_aspect_ratio)
}

// required float armor_max_pixel_val = 8;
bool Threshold::has_armor_max_pixel_val() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Threshold::set_has_armor_max_pixel_val() {
  _has_bits_[0] |= 0x00000080u;
}
void Threshold::clear_has_armor_max_pixel_val() {
  _has_bits_[0] &= ~0x00000080u;
}
void Threshold::clear_armor_max_pixel_val() {
  armor_max_pixel_val_ = 0;
  clear_has_armor_max_pixel_val();
}
 float Threshold::armor_max_pixel_val() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_pixel_val)
  return armor_max_pixel_val_;
}
 void Threshold::set_armor_max_pixel_val(float value) {
  set_has_armor_max_pixel_val();
  armor_max_pixel_val_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_pixel_val)
}

// required float armor_max_stddev = 9;
bool Threshold::has_armor_max_stddev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Threshold::set_has_armor_max_stddev() {
  _has_bits_[0] |= 0x00000100u;
}
void Threshold::clear_has_armor_max_stddev() {
  _has_bits_[0] &= ~0x00000100u;
}
void Threshold::clear_armor_max_stddev() {
  armor_max_stddev_ = 0;
  clear_has_armor_max_stddev();
}
 float Threshold::armor_max_stddev() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_stddev)
  return armor_max_stddev_;
}
 void Threshold::set_armor_max_stddev(float value) {
  set_has_armor_max_stddev();
  armor_max_stddev_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_stddev)
}

// required float armor_max_mean = 10;
bool Threshold::has_armor_max_mean() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Threshold::set_has_armor_max_mean() {
  _has_bits_[0] |= 0x00000200u;
}
void Threshold::clear_has_armor_max_mean() {
  _has_bits_[0] &= ~0x00000200u;
}
void Threshold::clear_armor_max_mean() {
  armor_max_mean_ = 0;
  clear_has_armor_max_mean();
}
 float Threshold::armor_max_mean() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_mean)
  return armor_max_mean_;
}
 void Threshold::set_armor_max_mean(float value) {
  set_has_armor_max_mean();
  armor_max_mean_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_mean)
}

// required float color_thread = 11;
bool Threshold::has_color_thread() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Threshold::set_has_color_thread() {
  _has_bits_[0] |= 0x00000400u;
}
void Threshold::clear_has_color_thread() {
  _has_bits_[0] &= ~0x00000400u;
}
void Threshold::clear_color_thread() {
  color_thread_ = 0;
  clear_has_color_thread();
}
 float Threshold::color_thread() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.color_thread)
  return color_thread_;
}
 void Threshold::set_color_thread(float value) {
  set_has_color_thread();
  color_thread_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.color_thread)
}

// required float blue_thread = 12;
bool Threshold::has_blue_thread() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Threshold::set_has_blue_thread() {
  _has_bits_[0] |= 0x00000800u;
}
void Threshold::clear_has_blue_thread() {
  _has_bits_[0] &= ~0x00000800u;
}
void Threshold::clear_blue_thread() {
  blue_thread_ = 0;
  clear_has_blue_thread();
}
 float Threshold::blue_thread() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.blue_thread)
  return blue_thread_;
}
 void Threshold::set_blue_thread(float value) {
  set_has_blue_thread();
  blue_thread_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.blue_thread)
}

// required float red_thread = 13;
bool Threshold::has_red_thread() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Threshold::set_has_red_thread() {
  _has_bits_[0] |= 0x00001000u;
}
void Threshold::clear_has_red_thread() {
  _has_bits_[0] &= ~0x00001000u;
}
void Threshold::clear_red_thread() {
  red_thread_ = 0;
  clear_has_red_thread();
}
 float Threshold::red_thread() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.red_thread)
  return red_thread_;
}
 void Threshold::set_red_thread(float value) {
  set_has_red_thread();
  red_thread_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.red_thread)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmorSize::kWidthFieldNumber;
const int ArmorSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmorSize::ArmorSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.ArmorSize)
}

void ArmorSize::InitAsDefaultInstance() {
}

ArmorSize::ArmorSize(const ArmorSize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_detection.ArmorSize)
}

void ArmorSize::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorSize::~ArmorSize() {
  // @@protoc_insertion_point(destructor:roborts_detection.ArmorSize)
  SharedDtor();
}

void ArmorSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmorSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmorSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmorSize_descriptor_;
}

const ArmorSize& ArmorSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fset_2eproto();
  return *default_instance_;
}

ArmorSize* ArmorSize::default_instance_ = NULL;

ArmorSize* ArmorSize::New(::google::protobuf::Arena* arena) const {
  ArmorSize* n = new ArmorSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArmorSize::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.ArmorSize)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ArmorSize, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ArmorSize*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ArmorSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.ArmorSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float width = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.ArmorSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.ArmorSize)
  return false;
#undef DO_
}

void ArmorSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.ArmorSize)
  // required float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.ArmorSize)
}

::google::protobuf::uint8* ArmorSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.ArmorSize)
  // required float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // required float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.ArmorSize)
  return target;
}

int ArmorSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.ArmorSize)
  int total_size = 0;

  if (has_width()) {
    // required float width = 1;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int ArmorSize::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.ArmorSize)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float width = 1;
    total_size += 1 + 4;

    // required float height = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.ArmorSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ArmorSize* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmorSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.ArmorSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.ArmorSize)
    MergeFrom(*source);
  }
}

void ArmorSize::MergeFrom(const ArmorSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.ArmorSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ArmorSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.ArmorSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorSize::CopyFrom(const ArmorSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.ArmorSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ArmorSize::Swap(ArmorSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmorSize::InternalSwap(ArmorSize* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArmorSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmorSize_descriptor_;
  metadata.reflection = ArmorSize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArmorSize

// required float width = 1;
bool ArmorSize::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArmorSize::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void ArmorSize::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArmorSize::clear_width() {
  width_ = 0;
  clear_has_width();
}
 float ArmorSize::width() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ArmorSize.width)
  return width_;
}
 void ArmorSize::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ArmorSize.width)
}

// required float height = 2;
bool ArmorSize::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArmorSize::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ArmorSize::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArmorSize::clear_height() {
  height_ = 0;
  clear_has_height();
}
 float ArmorSize::height() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ArmorSize.height)
  return height_;
}
 void ArmorSize::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ArmorSize.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalRecognization::kMaxWaitFpsFieldNumber;
const int SignalRecognization::kMinPulseAngleFieldNumber;
const int SignalRecognization::kMinNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalRecognization::SignalRecognization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.SignalRecognization)
}

void SignalRecognization::InitAsDefaultInstance() {
}

SignalRecognization::SignalRecognization(const SignalRecognization& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_detection.SignalRecognization)
}

void SignalRecognization::SharedCtor() {
  _cached_size_ = 0;
  max_wait_fps_ = 0u;
  min_pulse_angle_ = 0;
  min_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalRecognization::~SignalRecognization() {
  // @@protoc_insertion_point(destructor:roborts_detection.SignalRecognization)
  SharedDtor();
}

void SignalRecognization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalRecognization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalRecognization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalRecognization_descriptor_;
}

const SignalRecognization& SignalRecognization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fset_2eproto();
  return *default_instance_;
}

SignalRecognization* SignalRecognization::default_instance_ = NULL;

SignalRecognization* SignalRecognization::New(::google::protobuf::Arena* arena) const {
  SignalRecognization* n = new SignalRecognization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalRecognization::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.SignalRecognization)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SignalRecognization, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SignalRecognization*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_wait_fps_, min_num_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignalRecognization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.SignalRecognization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_wait_fps = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_wait_fps_)));
          set_has_max_wait_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_min_pulse_angle;
        break;
      }

      // required float min_pulse_angle = 2;
      case 2: {
        if (tag == 21) {
         parse_min_pulse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_pulse_angle_)));
          set_has_min_pulse_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_num;
        break;
      }

      // required uint32 min_num = 3;
      case 3: {
        if (tag == 24) {
         parse_min_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_num_)));
          set_has_min_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.SignalRecognization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.SignalRecognization)
  return false;
#undef DO_
}

void SignalRecognization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.SignalRecognization)
  // required uint32 max_wait_fps = 1;
  if (has_max_wait_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_wait_fps(), output);
  }

  // required float min_pulse_angle = 2;
  if (has_min_pulse_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_pulse_angle(), output);
  }

  // required uint32 min_num = 3;
  if (has_min_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.SignalRecognization)
}

::google::protobuf::uint8* SignalRecognization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.SignalRecognization)
  // required uint32 max_wait_fps = 1;
  if (has_max_wait_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_wait_fps(), target);
  }

  // required float min_pulse_angle = 2;
  if (has_min_pulse_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_pulse_angle(), target);
  }

  // required uint32 min_num = 3;
  if (has_min_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.SignalRecognization)
  return target;
}

int SignalRecognization::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.SignalRecognization)
  int total_size = 0;

  if (has_max_wait_fps()) {
    // required uint32 max_wait_fps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_wait_fps());
  }

  if (has_min_pulse_angle()) {
    // required float min_pulse_angle = 2;
    total_size += 1 + 4;
  }

  if (has_min_num()) {
    // required uint32 min_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_num());
  }

  return total_size;
}
int SignalRecognization::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.SignalRecognization)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 max_wait_fps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_wait_fps());

    // required float min_pulse_angle = 2;
    total_size += 1 + 4;

    // required uint32 min_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalRecognization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.SignalRecognization)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SignalRecognization* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalRecognization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.SignalRecognization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.SignalRecognization)
    MergeFrom(*source);
  }
}

void SignalRecognization::MergeFrom(const SignalRecognization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.SignalRecognization)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_wait_fps()) {
      set_max_wait_fps(from.max_wait_fps());
    }
    if (from.has_min_pulse_angle()) {
      set_min_pulse_angle(from.min_pulse_angle());
    }
    if (from.has_min_num()) {
      set_min_num(from.min_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignalRecognization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.SignalRecognization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalRecognization::CopyFrom(const SignalRecognization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.SignalRecognization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalRecognization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignalRecognization::Swap(SignalRecognization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalRecognization::InternalSwap(SignalRecognization* other) {
  std::swap(max_wait_fps_, other->max_wait_fps_);
  std::swap(min_pulse_angle_, other->min_pulse_angle_);
  std::swap(min_num_, other->min_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalRecognization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalRecognization_descriptor_;
  metadata.reflection = SignalRecognization_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalRecognization

// required uint32 max_wait_fps = 1;
bool SignalRecognization::has_max_wait_fps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalRecognization::set_has_max_wait_fps() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalRecognization::clear_has_max_wait_fps() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalRecognization::clear_max_wait_fps() {
  max_wait_fps_ = 0u;
  clear_has_max_wait_fps();
}
 ::google::protobuf::uint32 SignalRecognization::max_wait_fps() const {
  // @@protoc_insertion_point(field_get:roborts_detection.SignalRecognization.max_wait_fps)
  return max_wait_fps_;
}
 void SignalRecognization::set_max_wait_fps(::google::protobuf::uint32 value) {
  set_has_max_wait_fps();
  max_wait_fps_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.SignalRecognization.max_wait_fps)
}

// required float min_pulse_angle = 2;
bool SignalRecognization::has_min_pulse_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalRecognization::set_has_min_pulse_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalRecognization::clear_has_min_pulse_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalRecognization::clear_min_pulse_angle() {
  min_pulse_angle_ = 0;
  clear_has_min_pulse_angle();
}
 float SignalRecognization::min_pulse_angle() const {
  // @@protoc_insertion_point(field_get:roborts_detection.SignalRecognization.min_pulse_angle)
  return min_pulse_angle_;
}
 void SignalRecognization::set_min_pulse_angle(float value) {
  set_has_min_pulse_angle();
  min_pulse_angle_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.SignalRecognization.min_pulse_angle)
}

// required uint32 min_num = 3;
bool SignalRecognization::has_min_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignalRecognization::set_has_min_num() {
  _has_bits_[0] |= 0x00000004u;
}
void SignalRecognization::clear_has_min_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignalRecognization::clear_min_num() {
  min_num_ = 0u;
  clear_has_min_num();
}
 ::google::protobuf::uint32 SignalRecognization::min_num() const {
  // @@protoc_insertion_point(field_get:roborts_detection.SignalRecognization.min_num)
  return min_num_;
}
 void SignalRecognization::set_min_num(::google::protobuf::uint32 value) {
  set_has_min_num();
  min_num_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.SignalRecognization.min_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstraintSetConfig::kEnableDebugFieldNumber;
const int ConstraintSetConfig::kEnableNeonFieldNumber;
const int ConstraintSetConfig::kUsingHsvFieldNumber;
const int ConstraintSetConfig::kThresholdFieldNumber;
const int ConstraintSetConfig::kArmorSizeFieldNumber;
const int ConstraintSetConfig::kEnemyColorFieldNumber;
const int ConstraintSetConfig::kSignalRecognizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstraintSetConfig::ConstraintSetConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.ConstraintSetConfig)
}

void ConstraintSetConfig::InitAsDefaultInstance() {
  threshold_ = const_cast< ::roborts_detection::Threshold*>(&::roborts_detection::Threshold::default_instance());
  armor_size_ = const_cast< ::roborts_detection::ArmorSize*>(&::roborts_detection::ArmorSize::default_instance());
  signal_recognization_ = const_cast< ::roborts_detection::SignalRecognization*>(&::roborts_detection::SignalRecognization::default_instance());
}

ConstraintSetConfig::ConstraintSetConfig(const ConstraintSetConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_detection.ConstraintSetConfig)
}

void ConstraintSetConfig::SharedCtor() {
  _cached_size_ = 0;
  enable_debug_ = false;
  enable_neon_ = false;
  using_hsv_ = false;
  threshold_ = NULL;
  armor_size_ = NULL;
  enemy_color_ = 0;
  signal_recognization_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstraintSetConfig::~ConstraintSetConfig() {
  // @@protoc_insertion_point(destructor:roborts_detection.ConstraintSetConfig)
  SharedDtor();
}

void ConstraintSetConfig::SharedDtor() {
  if (this != default_instance_) {
    delete threshold_;
    delete armor_size_;
    delete signal_recognization_;
  }
}

void ConstraintSetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintSetConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstraintSetConfig_descriptor_;
}

const ConstraintSetConfig& ConstraintSetConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_constraint_5fset_2eproto();
  return *default_instance_;
}

ConstraintSetConfig* ConstraintSetConfig::default_instance_ = NULL;

ConstraintSetConfig* ConstraintSetConfig::New(::google::protobuf::Arena* arena) const {
  ConstraintSetConfig* n = new ConstraintSetConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstraintSetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.ConstraintSetConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConstraintSetConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConstraintSetConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(enable_debug_, enemy_color_);
    if (has_threshold()) {
      if (threshold_ != NULL) threshold_->::roborts_detection::Threshold::Clear();
    }
    if (has_armor_size()) {
      if (armor_size_ != NULL) armor_size_->::roborts_detection::ArmorSize::Clear();
    }
    if (has_signal_recognization()) {
      if (signal_recognization_ != NULL) signal_recognization_->::roborts_detection::SignalRecognization::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConstraintSetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.ConstraintSetConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable_debug = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_)));
          set_has_enable_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enable_neon;
        break;
      }

      // required bool enable_neon = 2;
      case 2: {
        if (tag == 16) {
         parse_enable_neon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_neon_)));
          set_has_enable_neon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_using_hsv;
        break;
      }

      // required bool using_hsv = 3;
      case 3: {
        if (tag == 24) {
         parse_using_hsv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_hsv_)));
          set_has_using_hsv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_threshold;
        break;
      }

      // required .roborts_detection.Threshold threshold = 4;
      case 4: {
        if (tag == 34) {
         parse_threshold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_armor_size;
        break;
      }

      // required .roborts_detection.ArmorSize armor_size = 5;
      case 5: {
        if (tag == 42) {
         parse_armor_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enemy_color;
        break;
      }

      // required .roborts_detection.EnemyColor enemy_color = 6;
      case 6: {
        if (tag == 48) {
         parse_enemy_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::roborts_detection::EnemyColor_IsValid(value)) {
            set_enemy_color(static_cast< ::roborts_detection::EnemyColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_signal_recognization;
        break;
      }

      // required .roborts_detection.SignalRecognization signal_recognization = 7;
      case 7: {
        if (tag == 58) {
         parse_signal_recognization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_recognization()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.ConstraintSetConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.ConstraintSetConfig)
  return false;
#undef DO_
}

void ConstraintSetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.ConstraintSetConfig)
  // required bool enable_debug = 1;
  if (has_enable_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_debug(), output);
  }

  // required bool enable_neon = 2;
  if (has_enable_neon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_neon(), output);
  }

  // required bool using_hsv = 3;
  if (has_using_hsv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->using_hsv(), output);
  }

  // required .roborts_detection.Threshold threshold = 4;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->threshold_, output);
  }

  // required .roborts_detection.ArmorSize armor_size = 5;
  if (has_armor_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->armor_size_, output);
  }

  // required .roborts_detection.EnemyColor enemy_color = 6;
  if (has_enemy_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->enemy_color(), output);
  }

  // required .roborts_detection.SignalRecognization signal_recognization = 7;
  if (has_signal_recognization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->signal_recognization_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.ConstraintSetConfig)
}

::google::protobuf::uint8* ConstraintSetConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.ConstraintSetConfig)
  // required bool enable_debug = 1;
  if (has_enable_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_debug(), target);
  }

  // required bool enable_neon = 2;
  if (has_enable_neon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_neon(), target);
  }

  // required bool using_hsv = 3;
  if (has_using_hsv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->using_hsv(), target);
  }

  // required .roborts_detection.Threshold threshold = 4;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->threshold_, false, target);
  }

  // required .roborts_detection.ArmorSize armor_size = 5;
  if (has_armor_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->armor_size_, false, target);
  }

  // required .roborts_detection.EnemyColor enemy_color = 6;
  if (has_enemy_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->enemy_color(), target);
  }

  // required .roborts_detection.SignalRecognization signal_recognization = 7;
  if (has_signal_recognization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->signal_recognization_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.ConstraintSetConfig)
  return target;
}

int ConstraintSetConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.ConstraintSetConfig)
  int total_size = 0;

  if (has_enable_debug()) {
    // required bool enable_debug = 1;
    total_size += 1 + 1;
  }

  if (has_enable_neon()) {
    // required bool enable_neon = 2;
    total_size += 1 + 1;
  }

  if (has_using_hsv()) {
    // required bool using_hsv = 3;
    total_size += 1 + 1;
  }

  if (has_threshold()) {
    // required .roborts_detection.Threshold threshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->threshold_);
  }

  if (has_armor_size()) {
    // required .roborts_detection.ArmorSize armor_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->armor_size_);
  }

  if (has_enemy_color()) {
    // required .roborts_detection.EnemyColor enemy_color = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enemy_color());
  }

  if (has_signal_recognization()) {
    // required .roborts_detection.SignalRecognization signal_recognization = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signal_recognization_);
  }

  return total_size;
}
int ConstraintSetConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.ConstraintSetConfig)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bool enable_debug = 1;
    total_size += 1 + 1;

    // required bool enable_neon = 2;
    total_size += 1 + 1;

    // required bool using_hsv = 3;
    total_size += 1 + 1;

    // required .roborts_detection.Threshold threshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->threshold_);

    // required .roborts_detection.ArmorSize armor_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->armor_size_);

    // required .roborts_detection.EnemyColor enemy_color = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enemy_color());

    // required .roborts_detection.SignalRecognization signal_recognization = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signal_recognization_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintSetConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.ConstraintSetConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConstraintSetConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstraintSetConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.ConstraintSetConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.ConstraintSetConfig)
    MergeFrom(*source);
  }
}

void ConstraintSetConfig::MergeFrom(const ConstraintSetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.ConstraintSetConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_debug()) {
      set_enable_debug(from.enable_debug());
    }
    if (from.has_enable_neon()) {
      set_enable_neon(from.enable_neon());
    }
    if (from.has_using_hsv()) {
      set_using_hsv(from.using_hsv());
    }
    if (from.has_threshold()) {
      mutable_threshold()->::roborts_detection::Threshold::MergeFrom(from.threshold());
    }
    if (from.has_armor_size()) {
      mutable_armor_size()->::roborts_detection::ArmorSize::MergeFrom(from.armor_size());
    }
    if (from.has_enemy_color()) {
      set_enemy_color(from.enemy_color());
    }
    if (from.has_signal_recognization()) {
      mutable_signal_recognization()->::roborts_detection::SignalRecognization::MergeFrom(from.signal_recognization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConstraintSetConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.ConstraintSetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintSetConfig::CopyFrom(const ConstraintSetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.ConstraintSetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintSetConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_threshold()) {
    if (!this->threshold_->IsInitialized()) return false;
  }
  if (has_armor_size()) {
    if (!this->armor_size_->IsInitialized()) return false;
  }
  if (has_signal_recognization()) {
    if (!this->signal_recognization_->IsInitialized()) return false;
  }
  return true;
}

void ConstraintSetConfig::Swap(ConstraintSetConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstraintSetConfig::InternalSwap(ConstraintSetConfig* other) {
  std::swap(enable_debug_, other->enable_debug_);
  std::swap(enable_neon_, other->enable_neon_);
  std::swap(using_hsv_, other->using_hsv_);
  std::swap(threshold_, other->threshold_);
  std::swap(armor_size_, other->armor_size_);
  std::swap(enemy_color_, other->enemy_color_);
  std::swap(signal_recognization_, other->signal_recognization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstraintSetConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstraintSetConfig_descriptor_;
  metadata.reflection = ConstraintSetConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstraintSetConfig

// required bool enable_debug = 1;
bool ConstraintSetConfig::has_enable_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConstraintSetConfig::set_has_enable_debug() {
  _has_bits_[0] |= 0x00000001u;
}
void ConstraintSetConfig::clear_has_enable_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConstraintSetConfig::clear_enable_debug() {
  enable_debug_ = false;
  clear_has_enable_debug();
}
 bool ConstraintSetConfig::enable_debug() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.enable_debug)
  return enable_debug_;
}
 void ConstraintSetConfig::set_enable_debug(bool value) {
  set_has_enable_debug();
  enable_debug_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.enable_debug)
}

// required bool enable_neon = 2;
bool ConstraintSetConfig::has_enable_neon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConstraintSetConfig::set_has_enable_neon() {
  _has_bits_[0] |= 0x00000002u;
}
void ConstraintSetConfig::clear_has_enable_neon() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConstraintSetConfig::clear_enable_neon() {
  enable_neon_ = false;
  clear_has_enable_neon();
}
 bool ConstraintSetConfig::enable_neon() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.enable_neon)
  return enable_neon_;
}
 void ConstraintSetConfig::set_enable_neon(bool value) {
  set_has_enable_neon();
  enable_neon_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.enable_neon)
}

// required bool using_hsv = 3;
bool ConstraintSetConfig::has_using_hsv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConstraintSetConfig::set_has_using_hsv() {
  _has_bits_[0] |= 0x00000004u;
}
void ConstraintSetConfig::clear_has_using_hsv() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConstraintSetConfig::clear_using_hsv() {
  using_hsv_ = false;
  clear_has_using_hsv();
}
 bool ConstraintSetConfig::using_hsv() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.using_hsv)
  return using_hsv_;
}
 void ConstraintSetConfig::set_using_hsv(bool value) {
  set_has_using_hsv();
  using_hsv_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.using_hsv)
}

// required .roborts_detection.Threshold threshold = 4;
bool ConstraintSetConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConstraintSetConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void ConstraintSetConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConstraintSetConfig::clear_threshold() {
  if (threshold_ != NULL) threshold_->::roborts_detection::Threshold::Clear();
  clear_has_threshold();
}
const ::roborts_detection::Threshold& ConstraintSetConfig::threshold() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.threshold)
  return threshold_ != NULL ? *threshold_ : *default_instance_->threshold_;
}
::roborts_detection::Threshold* ConstraintSetConfig::mutable_threshold() {
  set_has_threshold();
  if (threshold_ == NULL) {
    threshold_ = new ::roborts_detection::Threshold;
  }
  // @@protoc_insertion_point(field_mutable:roborts_detection.ConstraintSetConfig.threshold)
  return threshold_;
}
::roborts_detection::Threshold* ConstraintSetConfig::release_threshold() {
  // @@protoc_insertion_point(field_release:roborts_detection.ConstraintSetConfig.threshold)
  clear_has_threshold();
  ::roborts_detection::Threshold* temp = threshold_;
  threshold_ = NULL;
  return temp;
}
void ConstraintSetConfig::set_allocated_threshold(::roborts_detection::Threshold* threshold) {
  delete threshold_;
  threshold_ = threshold;
  if (threshold) {
    set_has_threshold();
  } else {
    clear_has_threshold();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_detection.ConstraintSetConfig.threshold)
}

// required .roborts_detection.ArmorSize armor_size = 5;
bool ConstraintSetConfig::has_armor_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConstraintSetConfig::set_has_armor_size() {
  _has_bits_[0] |= 0x00000010u;
}
void ConstraintSetConfig::clear_has_armor_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConstraintSetConfig::clear_armor_size() {
  if (armor_size_ != NULL) armor_size_->::roborts_detection::ArmorSize::Clear();
  clear_has_armor_size();
}
const ::roborts_detection::ArmorSize& ConstraintSetConfig::armor_size() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.armor_size)
  return armor_size_ != NULL ? *armor_size_ : *default_instance_->armor_size_;
}
::roborts_detection::ArmorSize* ConstraintSetConfig::mutable_armor_size() {
  set_has_armor_size();
  if (armor_size_ == NULL) {
    armor_size_ = new ::roborts_detection::ArmorSize;
  }
  // @@protoc_insertion_point(field_mutable:roborts_detection.ConstraintSetConfig.armor_size)
  return armor_size_;
}
::roborts_detection::ArmorSize* ConstraintSetConfig::release_armor_size() {
  // @@protoc_insertion_point(field_release:roborts_detection.ConstraintSetConfig.armor_size)
  clear_has_armor_size();
  ::roborts_detection::ArmorSize* temp = armor_size_;
  armor_size_ = NULL;
  return temp;
}
void ConstraintSetConfig::set_allocated_armor_size(::roborts_detection::ArmorSize* armor_size) {
  delete armor_size_;
  armor_size_ = armor_size;
  if (armor_size) {
    set_has_armor_size();
  } else {
    clear_has_armor_size();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_detection.ConstraintSetConfig.armor_size)
}

// required .roborts_detection.EnemyColor enemy_color = 6;
bool ConstraintSetConfig::has_enemy_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConstraintSetConfig::set_has_enemy_color() {
  _has_bits_[0] |= 0x00000020u;
}
void ConstraintSetConfig::clear_has_enemy_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConstraintSetConfig::clear_enemy_color() {
  enemy_color_ = 0;
  clear_has_enemy_color();
}
 ::roborts_detection::EnemyColor ConstraintSetConfig::enemy_color() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.enemy_color)
  return static_cast< ::roborts_detection::EnemyColor >(enemy_color_);
}
 void ConstraintSetConfig::set_enemy_color(::roborts_detection::EnemyColor value) {
  assert(::roborts_detection::EnemyColor_IsValid(value));
  set_has_enemy_color();
  enemy_color_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.enemy_color)
}

// required .roborts_detection.SignalRecognization signal_recognization = 7;
bool ConstraintSetConfig::has_signal_recognization() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConstraintSetConfig::set_has_signal_recognization() {
  _has_bits_[0] |= 0x00000040u;
}
void ConstraintSetConfig::clear_has_signal_recognization() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConstraintSetConfig::clear_signal_recognization() {
  if (signal_recognization_ != NULL) signal_recognization_->::roborts_detection::SignalRecognization::Clear();
  clear_has_signal_recognization();
}
const ::roborts_detection::SignalRecognization& ConstraintSetConfig::signal_recognization() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.signal_recognization)
  return signal_recognization_ != NULL ? *signal_recognization_ : *default_instance_->signal_recognization_;
}
::roborts_detection::SignalRecognization* ConstraintSetConfig::mutable_signal_recognization() {
  set_has_signal_recognization();
  if (signal_recognization_ == NULL) {
    signal_recognization_ = new ::roborts_detection::SignalRecognization;
  }
  // @@protoc_insertion_point(field_mutable:roborts_detection.ConstraintSetConfig.signal_recognization)
  return signal_recognization_;
}
::roborts_detection::SignalRecognization* ConstraintSetConfig::release_signal_recognization() {
  // @@protoc_insertion_point(field_release:roborts_detection.ConstraintSetConfig.signal_recognization)
  clear_has_signal_recognization();
  ::roborts_detection::SignalRecognization* temp = signal_recognization_;
  signal_recognization_ = NULL;
  return temp;
}
void ConstraintSetConfig::set_allocated_signal_recognization(::roborts_detection::SignalRecognization* signal_recognization) {
  delete signal_recognization_;
  signal_recognization_ = signal_recognization;
  if (signal_recognization) {
    set_has_signal_recognization();
  } else {
    clear_has_signal_recognization();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_detection.ConstraintSetConfig.signal_recognization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_detection

// @@protoc_insertion_point(global_scope)
