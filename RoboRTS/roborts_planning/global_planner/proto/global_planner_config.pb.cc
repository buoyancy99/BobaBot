// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_planner_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "global_planner_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_global_planner {

namespace {

const ::google::protobuf::Descriptor* GlobalPlannerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalPlannerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_global_5fplanner_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_global_5fplanner_5fconfig_2eproto() {
  protobuf_AddDesc_global_5fplanner_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "global_planner_config.proto");
  GOOGLE_CHECK(file != NULL);
  GlobalPlannerConfig_descriptor_ = file->message_type(0);
  static const int GlobalPlannerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, selected_algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, max_retries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, goal_distance_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, goal_angle_tolerance_),
  };
  GlobalPlannerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GlobalPlannerConfig_descriptor_,
      GlobalPlannerConfig::default_instance_,
      GlobalPlannerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(GlobalPlannerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_global_5fplanner_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GlobalPlannerConfig_descriptor_, &GlobalPlannerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_global_5fplanner_5fconfig_2eproto() {
  delete GlobalPlannerConfig::default_instance_;
  delete GlobalPlannerConfig_reflection_;
}

void protobuf_AddDesc_global_5fplanner_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_global_5fplanner_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033global_planner_config.proto\022\026roborts_g"
    "lobal_planner\"\246\001\n\023GlobalPlannerConfig\022\014\n"
    "\004name\030\001 \003(\t\022\032\n\022selected_algorithm\030\002 \001(\t\022"
    "\021\n\tfrequency\030\003 \002(\005\022\023\n\013max_retries\030\004 \002(\005\022"
    "\037\n\027goal_distance_tolerance\030\005 \002(\001\022\034\n\024goal"
    "_angle_tolerance\030\006 \002(\001", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "global_planner_config.proto", &protobuf_RegisterTypes);
  GlobalPlannerConfig::default_instance_ = new GlobalPlannerConfig();
  GlobalPlannerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_global_5fplanner_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_global_5fplanner_5fconfig_2eproto {
  StaticDescriptorInitializer_global_5fplanner_5fconfig_2eproto() {
    protobuf_AddDesc_global_5fplanner_5fconfig_2eproto();
  }
} static_descriptor_initializer_global_5fplanner_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalPlannerConfig::kNameFieldNumber;
const int GlobalPlannerConfig::kSelectedAlgorithmFieldNumber;
const int GlobalPlannerConfig::kFrequencyFieldNumber;
const int GlobalPlannerConfig::kMaxRetriesFieldNumber;
const int GlobalPlannerConfig::kGoalDistanceToleranceFieldNumber;
const int GlobalPlannerConfig::kGoalAngleToleranceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalPlannerConfig::GlobalPlannerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_global_planner.GlobalPlannerConfig)
}

void GlobalPlannerConfig::InitAsDefaultInstance() {
}

GlobalPlannerConfig::GlobalPlannerConfig(const GlobalPlannerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_global_planner.GlobalPlannerConfig)
}

void GlobalPlannerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  selected_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0;
  max_retries_ = 0;
  goal_distance_tolerance_ = 0;
  goal_angle_tolerance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalPlannerConfig::~GlobalPlannerConfig() {
  // @@protoc_insertion_point(destructor:roborts_global_planner.GlobalPlannerConfig)
  SharedDtor();
}

void GlobalPlannerConfig::SharedDtor() {
  selected_algorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GlobalPlannerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalPlannerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalPlannerConfig_descriptor_;
}

const GlobalPlannerConfig& GlobalPlannerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_global_5fplanner_5fconfig_2eproto();
  return *default_instance_;
}

GlobalPlannerConfig* GlobalPlannerConfig::default_instance_ = NULL;

GlobalPlannerConfig* GlobalPlannerConfig::New(::google::protobuf::Arena* arena) const {
  GlobalPlannerConfig* n = new GlobalPlannerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalPlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_global_planner.GlobalPlannerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GlobalPlannerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GlobalPlannerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 62u) {
    ZR_(frequency_, goal_angle_tolerance_);
    if (has_selected_algorithm()) {
      selected_algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GlobalPlannerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_global_planner.GlobalPlannerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (tag == 10) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_global_planner.GlobalPlannerConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectTag(18)) goto parse_selected_algorithm;
        break;
      }

      // optional string selected_algorithm = 2;
      case 2: {
        if (tag == 18) {
         parse_selected_algorithm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selected_algorithm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selected_algorithm().data(), this->selected_algorithm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_global_planner.GlobalPlannerConfig.selected_algorithm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frequency;
        break;
      }

      // required int32 frequency = 3;
      case 3: {
        if (tag == 24) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_retries;
        break;
      }

      // required int32 max_retries = 4;
      case 4: {
        if (tag == 32) {
         parse_max_retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_retries_)));
          set_has_max_retries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_goal_distance_tolerance;
        break;
      }

      // required double goal_distance_tolerance = 5;
      case 5: {
        if (tag == 41) {
         parse_goal_distance_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &goal_distance_tolerance_)));
          set_has_goal_distance_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_goal_angle_tolerance;
        break;
      }

      // required double goal_angle_tolerance = 6;
      case 6: {
        if (tag == 49) {
         parse_goal_angle_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &goal_angle_tolerance_)));
          set_has_goal_angle_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_global_planner.GlobalPlannerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_global_planner.GlobalPlannerConfig)
  return false;
#undef DO_
}

void GlobalPlannerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_global_planner.GlobalPlannerConfig)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_global_planner.GlobalPlannerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  // optional string selected_algorithm = 2;
  if (has_selected_algorithm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selected_algorithm().data(), this->selected_algorithm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_global_planner.GlobalPlannerConfig.selected_algorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->selected_algorithm(), output);
  }

  // required int32 frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frequency(), output);
  }

  // required int32 max_retries = 4;
  if (has_max_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_retries(), output);
  }

  // required double goal_distance_tolerance = 5;
  if (has_goal_distance_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->goal_distance_tolerance(), output);
  }

  // required double goal_angle_tolerance = 6;
  if (has_goal_angle_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->goal_angle_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_global_planner.GlobalPlannerConfig)
}

::google::protobuf::uint8* GlobalPlannerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_global_planner.GlobalPlannerConfig)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_global_planner.GlobalPlannerConfig.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  // optional string selected_algorithm = 2;
  if (has_selected_algorithm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selected_algorithm().data(), this->selected_algorithm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_global_planner.GlobalPlannerConfig.selected_algorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->selected_algorithm(), target);
  }

  // required int32 frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frequency(), target);
  }

  // required int32 max_retries = 4;
  if (has_max_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_retries(), target);
  }

  // required double goal_distance_tolerance = 5;
  if (has_goal_distance_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->goal_distance_tolerance(), target);
  }

  // required double goal_angle_tolerance = 6;
  if (has_goal_angle_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->goal_angle_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_global_planner.GlobalPlannerConfig)
  return target;
}

int GlobalPlannerConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_global_planner.GlobalPlannerConfig)
  int total_size = 0;

  if (has_frequency()) {
    // required int32 frequency = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());
  }

  if (has_max_retries()) {
    // required int32 max_retries = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_retries());
  }

  if (has_goal_distance_tolerance()) {
    // required double goal_distance_tolerance = 5;
    total_size += 1 + 8;
  }

  if (has_goal_angle_tolerance()) {
    // required double goal_angle_tolerance = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
int GlobalPlannerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_global_planner.GlobalPlannerConfig)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required int32 frequency = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());

    // required int32 max_retries = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_retries());

    // required double goal_distance_tolerance = 5;
    total_size += 1 + 8;

    // required double goal_angle_tolerance = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string selected_algorithm = 2;
  if (has_selected_algorithm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selected_algorithm());
  }

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalPlannerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_global_planner.GlobalPlannerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GlobalPlannerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalPlannerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_global_planner.GlobalPlannerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_global_planner.GlobalPlannerConfig)
    MergeFrom(*source);
  }
}

void GlobalPlannerConfig::MergeFrom(const GlobalPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_global_planner.GlobalPlannerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  name_.MergeFrom(from.name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selected_algorithm()) {
      set_has_selected_algorithm();
      selected_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_algorithm_);
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_max_retries()) {
      set_max_retries(from.max_retries());
    }
    if (from.has_goal_distance_tolerance()) {
      set_goal_distance_tolerance(from.goal_distance_tolerance());
    }
    if (from.has_goal_angle_tolerance()) {
      set_goal_angle_tolerance(from.goal_angle_tolerance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GlobalPlannerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_global_planner.GlobalPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalPlannerConfig::CopyFrom(const GlobalPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_global_planner.GlobalPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalPlannerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;

  return true;
}

void GlobalPlannerConfig::Swap(GlobalPlannerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalPlannerConfig::InternalSwap(GlobalPlannerConfig* other) {
  name_.UnsafeArenaSwap(&other->name_);
  selected_algorithm_.Swap(&other->selected_algorithm_);
  std::swap(frequency_, other->frequency_);
  std::swap(max_retries_, other->max_retries_);
  std::swap(goal_distance_tolerance_, other->goal_distance_tolerance_);
  std::swap(goal_angle_tolerance_, other->goal_angle_tolerance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalPlannerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalPlannerConfig_descriptor_;
  metadata.reflection = GlobalPlannerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalPlannerConfig

// repeated string name = 1;
int GlobalPlannerConfig::name_size() const {
  return name_.size();
}
void GlobalPlannerConfig::clear_name() {
  name_.Clear();
}
 const ::std::string& GlobalPlannerConfig::name(int index) const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.name)
  return name_.Get(index);
}
 ::std::string* GlobalPlannerConfig::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_global_planner.GlobalPlannerConfig.name)
  return name_.Mutable(index);
}
 void GlobalPlannerConfig::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.name)
  name_.Mutable(index)->assign(value);
}
 void GlobalPlannerConfig::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roborts_global_planner.GlobalPlannerConfig.name)
}
 void GlobalPlannerConfig::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roborts_global_planner.GlobalPlannerConfig.name)
}
 ::std::string* GlobalPlannerConfig::add_name() {
  // @@protoc_insertion_point(field_add_mutable:roborts_global_planner.GlobalPlannerConfig.name)
  return name_.Add();
}
 void GlobalPlannerConfig::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roborts_global_planner.GlobalPlannerConfig.name)
}
 void GlobalPlannerConfig::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roborts_global_planner.GlobalPlannerConfig.name)
}
 void GlobalPlannerConfig::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roborts_global_planner.GlobalPlannerConfig.name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GlobalPlannerConfig::name() const {
  // @@protoc_insertion_point(field_list:roborts_global_planner.GlobalPlannerConfig.name)
  return name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GlobalPlannerConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:roborts_global_planner.GlobalPlannerConfig.name)
  return &name_;
}

// optional string selected_algorithm = 2;
bool GlobalPlannerConfig::has_selected_algorithm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlobalPlannerConfig::set_has_selected_algorithm() {
  _has_bits_[0] |= 0x00000002u;
}
void GlobalPlannerConfig::clear_has_selected_algorithm() {
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalPlannerConfig::clear_selected_algorithm() {
  selected_algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_selected_algorithm();
}
 const ::std::string& GlobalPlannerConfig::selected_algorithm() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
  return selected_algorithm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GlobalPlannerConfig::set_selected_algorithm(const ::std::string& value) {
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}
 void GlobalPlannerConfig::set_selected_algorithm(const char* value) {
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}
 void GlobalPlannerConfig::set_selected_algorithm(const char* value, size_t size) {
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}
 ::std::string* GlobalPlannerConfig::mutable_selected_algorithm() {
  set_has_selected_algorithm();
  // @@protoc_insertion_point(field_mutable:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
  return selected_algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GlobalPlannerConfig::release_selected_algorithm() {
  // @@protoc_insertion_point(field_release:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
  clear_has_selected_algorithm();
  return selected_algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GlobalPlannerConfig::set_allocated_selected_algorithm(::std::string* selected_algorithm) {
  if (selected_algorithm != NULL) {
    set_has_selected_algorithm();
  } else {
    clear_has_selected_algorithm();
  }
  selected_algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selected_algorithm);
  // @@protoc_insertion_point(field_set_allocated:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}

// required int32 frequency = 3;
bool GlobalPlannerConfig::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GlobalPlannerConfig::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void GlobalPlannerConfig::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalPlannerConfig::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
 ::google::protobuf::int32 GlobalPlannerConfig::frequency() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.frequency)
  return frequency_;
}
 void GlobalPlannerConfig::set_frequency(::google::protobuf::int32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.frequency)
}

// required int32 max_retries = 4;
bool GlobalPlannerConfig::has_max_retries() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GlobalPlannerConfig::set_has_max_retries() {
  _has_bits_[0] |= 0x00000008u;
}
void GlobalPlannerConfig::clear_has_max_retries() {
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalPlannerConfig::clear_max_retries() {
  max_retries_ = 0;
  clear_has_max_retries();
}
 ::google::protobuf::int32 GlobalPlannerConfig::max_retries() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.max_retries)
  return max_retries_;
}
 void GlobalPlannerConfig::set_max_retries(::google::protobuf::int32 value) {
  set_has_max_retries();
  max_retries_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.max_retries)
}

// required double goal_distance_tolerance = 5;
bool GlobalPlannerConfig::has_goal_distance_tolerance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GlobalPlannerConfig::set_has_goal_distance_tolerance() {
  _has_bits_[0] |= 0x00000010u;
}
void GlobalPlannerConfig::clear_has_goal_distance_tolerance() {
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalPlannerConfig::clear_goal_distance_tolerance() {
  goal_distance_tolerance_ = 0;
  clear_has_goal_distance_tolerance();
}
 double GlobalPlannerConfig::goal_distance_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
  return goal_distance_tolerance_;
}
 void GlobalPlannerConfig::set_goal_distance_tolerance(double value) {
  set_has_goal_distance_tolerance();
  goal_distance_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
}

// required double goal_angle_tolerance = 6;
bool GlobalPlannerConfig::has_goal_angle_tolerance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GlobalPlannerConfig::set_has_goal_angle_tolerance() {
  _has_bits_[0] |= 0x00000020u;
}
void GlobalPlannerConfig::clear_has_goal_angle_tolerance() {
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalPlannerConfig::clear_goal_angle_tolerance() {
  goal_angle_tolerance_ = 0;
  clear_has_goal_angle_tolerance();
}
 double GlobalPlannerConfig::goal_angle_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
  return goal_angle_tolerance_;
}
 void GlobalPlannerConfig::set_goal_angle_tolerance(double value) {
  set_has_goal_angle_tolerance();
  goal_angle_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_global_planner

// @@protoc_insertion_point(global_scope)
